
udm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000015c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000001f0  2**0
                  ALLOC
  3 .stab         000005c4  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c4e  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001402  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	17 c0       	rjmp	.+46     	; 0x40 <__vector_8>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	0e c0       	rjmp	.+28     	; 0x3e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a3 36       	cpi	r26, 0x63	; 99
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	75 d0       	rcall	.+234    	; 0x126 <main>
  3c:	8d c0       	rjmp	.+282    	; 0x158 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_8>:
#include "udm_utils.h"

enum { UP, DOWN };

ISR (TIMER1_OVF_vect)
{
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	00 90 5f 00 	lds	r0, 0x005F
  48:	0f 92       	push	r0
  4a:	11 24       	eor	r1, r1
  4c:	2f 93       	push	r18
  4e:	3f 93       	push	r19
  50:	8f 93       	push	r24
  52:	9f 93       	push	r25
  54:	ef 93       	push	r30
  56:	ff 93       	push	r31
  58:	cf 93       	push	r28
  5a:	df 93       	push	r29
  5c:	cd b7       	in	r28, 0x3d	; 61
  5e:	dd 27       	eor	r29, r29
    static uint16_t pwm;
    static uint8_t direction;
    switch (direction)
  60:	80 91 60 00 	lds	r24, 0x0060
  64:	88 2f       	mov	r24, r24
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	00 97       	sbiw	r24, 0x00	; 0
  6a:	19 f0       	breq	.+6      	; 0x72 <__vector_8+0x32>
  6c:	01 97       	sbiw	r24, 0x01	; 1
  6e:	b1 f0       	breq	.+44     	; 0x9c <__vector_8+0x5c>
  70:	28 c0       	rjmp	.+80     	; 0xc2 <__vector_8+0x82>
    {
        case UP:
            if (++pwm == TIMER1_TOP)
  72:	80 91 61 00 	lds	r24, 0x0061
  76:	90 91 62 00 	lds	r25, 0x0062
  7a:	01 96       	adiw	r24, 0x01	; 1
  7c:	90 93 62 00 	sts	0x0062, r25
  80:	80 93 61 00 	sts	0x0061, r24
  84:	80 91 61 00 	lds	r24, 0x0061
  88:	90 91 62 00 	lds	r25, 0x0062
  8c:	8f 3f       	cpi	r24, 0xFF	; 255
  8e:	93 40       	sbci	r25, 0x03	; 3
  90:	21 f4       	brne	.+8      	; 0x9a <__vector_8+0x5a>
                direction = DOWN;
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	80 93 60 00 	sts	0x0060, r24
            break;
  98:	14 c0       	rjmp	.+40     	; 0xc2 <__vector_8+0x82>
  9a:	13 c0       	rjmp	.+38     	; 0xc2 <__vector_8+0x82>
        case DOWN:
            if (--pwm == 0)
  9c:	80 91 61 00 	lds	r24, 0x0061
  a0:	90 91 62 00 	lds	r25, 0x0062
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	90 93 62 00 	sts	0x0062, r25
  aa:	80 93 61 00 	sts	0x0061, r24
  ae:	80 91 61 00 	lds	r24, 0x0061
  b2:	90 91 62 00 	lds	r25, 0x0062
  b6:	89 2b       	or	r24, r25
  b8:	19 f4       	brne	.+6      	; 0xc0 <__vector_8+0x80>
                direction = UP;
  ba:	10 92 60 00 	sts	0x0060, r1
            break;
  be:	00 c0       	rjmp	.+0      	; 0xc0 <__vector_8+0x80>
  c0:	00 00       	nop
    }
    OCR = pwm;
  c2:	8a e4       	ldi	r24, 0x4A	; 74
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	20 91 61 00 	lds	r18, 0x0061
  ca:	30 91 62 00 	lds	r19, 0x0062
  ce:	fc 01       	movw	r30, r24
  d0:	31 83       	std	Z+1, r19	; 0x01
  d2:	20 83       	st	Z, r18
}
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	00 92 5f 00 	sts	0x005F, r0
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <ioinit>:


void
ioinit (void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	dd 27       	eor	r29, r29
    /* Timer 0 is 8-bit PWM */
	/* Timer 0 is used to generate the 40 KHz pulses in OC0A and OC0B */


	TCCR0A = _BV(COM0A0) | _BV(WGM02) | _BV(WGM01) | _BV(WGM00); /* Fast PWM, and toggle OC0A on Compare Match */
  f8:	80 e5       	ldi	r24, 0x50	; 80
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2b e4       	ldi	r18, 0x4B	; 75
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
	OCR0A = 39; /* note [1] */
 102:	86 e5       	ldi	r24, 0x56	; 86
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	27 e2       	ldi	r18, 0x27	; 39
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	TCCR0B = (1<<CS01) | (1<<CS00); /* Set the prescale to 64, note [1] */
 10c:	83 e5       	ldi	r24, 0x53	; 83
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	23 e0       	ldi	r18, 0x03	; 3
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18

    /* Enable OC1 as output. */
    DDROC = _BV (OC1);
 116:	8a e3       	ldi	r24, 0x3A	; 58
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18

    /* Enable timer 1 overflow interrupt. */
    //TIMSK = _BV (TOIE1);
    //sei ();
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <main>:

int
main (void)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	dd 27       	eor	r29, r29
    ioinit ();
 12e:	e0 df       	rcall	.-64     	; 0xf0 <ioinit>
    /* loop forever, the interrupts are doing the rest */
    for (;;)
        sleep_mode();
 130:	85 e5       	ldi	r24, 0x55	; 85
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	25 e5       	ldi	r18, 0x55	; 85
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	20 62       	ori	r18, 0x20	; 32
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	88 95       	sleep
 144:	85 e5       	ldi	r24, 0x55	; 85
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	25 e5       	ldi	r18, 0x55	; 85
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2f 7d       	andi	r18, 0xDF	; 223
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
 156:	ec cf       	rjmp	.-40     	; 0x130 <main+0xa>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
